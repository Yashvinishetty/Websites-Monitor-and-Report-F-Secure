import pandas as pd
import requests
import time
import logging
from datetime import datetime
from flask import Flask, render_template

# Configure logging
logging.basicConfig(filename='monitor.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize Flask app
app = Flask(__name__)

# Function to check a single URL
def check_url(url, content_requirement):
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception if the HTTP request fails
        
        if content_requirement in response.text:
            return True, response.elapsed.total_seconds()
        else:
            return False, response.elapsed.total_seconds()
    except requests.exceptions.RequestException:
        return False, None  # Connection level problem
    except Exception as e:
        return False, None  # Other unexpected error

# Function to periodically check URLs
def periodic_check(urls_df, interval):
    while True:
        for index, row in urls_df.iterrows():
            url = row['url']
            content_requirement = row['content_requirement']
            
            success, response_time = check_url(url, content_requirement)
            
            if success:
                status = 'OK'
            elif response_time is not None:
                status = 'Content Problem'
            else:
                status = 'Connection Problem'
            
            log_message = f"{url} - Status: {status} - Response Time: {response_time} seconds"
            logging.info(log_message)
            print(log_message)
        
        time.sleep(interval)

# Route for web-based monitoring interface
@app.route('/')
def web_interface():
    with open('monitor.log', 'r') as log_file:
        log_data = log_file.readlines()
    
    return render_template('status.html', log_data=log_data)

if __name__ == '__main__':
    try:
        # Read configuration from a CSV file using pandas
        config_file = 'config.csv'
        urls_df = pd.read_csv(config_file)
        
        
        # Specify the checking interval (in seconds)
        checking_interval = 60  # Default interval
        
        # Start the periodic checks in a separate thread
        import threading
        check_thread = threading.Thread(target=periodic_check, args=(urls_df, checking_interval))
        check_thread.daemon = True
        check_thread.start()
        
        # Start the Flask web server for the optional interface
        app.run(debug=True)
    
  

import requests
import time
import logging
import pandas as pd

# Configuration
CONFIG_FILE = "config.txt"
LOG_FILE = "monitoring.log"
CHECK_INTERVAL = 60  # Default check interval in seconds

# Initialize logging
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(message)s')

# Data structure to store website monitoring information using Pandas DataFrame
website_data = pd.DataFrame(columns=["URL", "Content Requirement", "Check Interval", "Last Check Time", "Status", "Response Time"])

# Load configuration from a file into a Pandas DataFrame
def load_config():
   global website_data
   config_data = pd.read_csv(CONFIG_FILE, header=None, names=["URL", "Content Requirement", "Check Interval"])
   website_data = website_data.append(config_data)

# Function to make HTTP requests and monitor websites
def monitor_websites():
   while True:
       for index, row in website_data.iterrows():
           try:
               start_time = time.time()
               response = requests.get(row["URL"])
               end_time = time.time()

               if response.status_code == 200:
                   content = response.text
                   if row["Content Requirement"] in content:
                       status = "OK"
                   else:
                       status = "Content Problem"
               else:
                   status = "Connection Problem"

               response_time = round(end_time - start_time, 2)
               last_check_time = time.strftime("%Y-%m-%d %H:%M:%S")

               # Update the DataFrame with the results
               website_data.at[index, "Status"] = status
               website_data.at[index, "Response Time"] = response_time
               website_data.at[index, "Last Check Time"] = last_check_time

           except requests.exceptions.RequestException:
               website_data.at[index, "Status"] = "Connection Problem"

           # Log the result
           log_entry = f"URL: {row['URL']}, Status: {status}, Response Time: {response_time} seconds"
           logging.info(log_entry)

       time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
   load_config()

   # Start monitoring in a separate thread
   import threading
   monitor_thread = threading.Thread(target=monitor_websites)
   monitor_thread.start()

   while True:
       pass  # Keep the main thread running
